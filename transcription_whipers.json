{
  "name": "transcription_whipers",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-audio",
        "options": {}
      },
      "id": "18b669b7-5039-4773-b6dd-c8204db9e1cd",
      "name": "Webhook Audio Upload1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1960,
        840
      ],
      "webhookId": "46b4f7c3-d26e-4dec-b93c-619d492dd07b"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"upload\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1680,
        840
      ],
      "id": "fa5c65c5-43ad-4232-bcea-7ba382af9c38",
      "name": "signal upload"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"transcription\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        840
      ],
      "id": "0d941b2f-83ba-4e2d-a251-9a360e90cfd0",
      "name": "signal upload1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b658fbed-41dc-41bd-9fa1-f9199296bf43",
              "leftValue": "={{ $('Webhook Audio Upload1').item.json.body.documentType }}",
              "rightValue": "Compte rendu",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -264,
        840
      ],
      "id": "6c4c6854-5273-4888-ae04-d4f3c0ed9040",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7dfcc82a-f6b9-4f66-9f20-69aa93326f7d",
              "leftValue": "={{ $('Webhook Audio Upload1').item.json.body.documentType }}",
              "rightValue": "Proc√®s verbal",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -44,
        940
      ],
      "id": "154dfd77-ccdd-4d0d-bd1d-8fade46bf5eb",
      "name": "If1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "=<|system|>Tu es un assistant expert en synth√®se de r√©unions dans un contexte professionnel.</s><|user|>Voici les informations d‚Äôune r√©union :\n- Titre : {{ $('Webhook Audio Upload1').item.json.body.meetingTitle }} \n- Date : {{ $('Webhook Audio Upload1').item.json.body.meetingDate }} \n- Objectifs : {{ $('Webhook Audio Upload1').item.json.body.mainObjective }} \n- Ordres du jour : {{ $('Webhook Audio Upload1').item.json.body.ordreJour }}\n- participants: {{ $('Webhook Audio Upload1').item.json.body.participants }}\n- Transcription : {{ $('Extract from File').item.json.data }}  \nInstructions : \n 1. Relis la transcription. Corrige les erreur et D√©duis le contexte m√©tier. \n 3. Structure un compte-rendu :    \n    - En-t√™te    \n    - Objectifs    \n    - Points cl√©s    \n    - D√©cisions    \n    - Actions    \n    - Points √† suivre    \n    - Prochaine r√©union \n 4. langue du document: {{ $('Webhook Audio Upload1').item.json.body.language }}\n 5. Formate en Markdown. \n 6. Ajoute une section Hypoth√®ses & Recommandations.\n 7. pas de guillmet</s><|assistant|>"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -44,
        640
      ],
      "id": "72356ffa-76d8-45dd-9e84-c346885633fb",
      "name": "compte rendu",
      "credentials": {
        "httpHeaderAuth": {
          "id": "JfCWC6zfw6MXnPz9",
          "name": "hugginFace4"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/HuggingFaceH4/zephyr-7b-beta",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "=<|system|>\nTu es un assistant expert en r√©daction de proc√®s-verbaux et comptes rendus professionnels pour des r√©unions d‚Äôentreprise. Tu r√©diges de fa√ßon formelle, structur√©e et claire.\n\n</s><|user|>\nVoici les informations relatives √† la r√©union :\n- Titre / Sujet : {{ $('Webhook Audio Upload1').item.json.body.meetingTitle }}\n- Date : {{ $('Webhook Audio Upload1').item.json.body.meetingDate }}\n-langue de readaction:{{ $('Webhook Audio Upload1').item.json.body.language }}\n- Participants(si donn√©) :{{ $('Webhook Audio Upload1').item.json.body.participants }}\n- Objectifs :{{ $('Webhook Audio Upload1').item.json.body.mainObjective }}\n- Ordre du jour : {{ $('Webhook Audio Upload1').item.json.body.ordreJour }}\nVoici la transcription brute de la r√©union (peut contenir de petites erreurs ou impr√©cisions) : {{ $('Extract from File').item.json.data }}\n\nR√©dige un proc√®s-verbal professionnel respectant les consignes suivantes :\n1. En-t√™te : inclure clairement le titre, la date, l‚Äôheure, le lieu, la liste des participants, l‚Äôanimateur, l‚Äôordre du jour.\n2. R√©sum√© ex√©cutif : proposer un court r√©sum√© (2-3 phrases) des points principaux.\n3. D√©roul√© d√©taill√© : pour chaque point d‚Äôordre du jour :\n   - R√©sumer les √©changes de mani√®re synth√©tique et pr√©cise.\n   - Corriger les coquilles ou reformuler les phrases incompl√®tes si possible.\n   - Si un passage est ambigu ou incomplet dans la transcription, faire une hypoth√®se raisonnable et signaler ¬´ [√Ä clarifier] ¬ª.\n   - Mentionner les arguments principaux ou id√©es cl√©s exprim√©es.\n4. D√©cisions : lister clairement les d√©cisions prises.\n5. Actions (action items) : extraire les t√¢ches identifi√©es, avec description, responsable, √©ch√©ance ou ¬´ √Ä d√©finir ¬ª.\n6. Points divers : inclure bri√®vement toute discussion hors ordre du jour si not√©e.\n7. Conclusion / Cl√¥ture : r√©sumer la fin de la r√©union, prochaines √©tapes, date de la prochaine r√©union si connue.\n8. Notes / Incertitudes : √† la fin, lister les passages de la transcription jug√©s peu clairs ou n√©cessitant relecture.\nFormat de sortie :\n- Utilise une mise en forme claire en Markdown (titres, listes).\n- Sois concis mais exhaustif.\n- Si tu fais une hypoth√®se pour un passage ambigu, mets-le entre crochets et explique bri√®vement pourquoi.\nRends-le pr√™t √† envoyer ou archiver, sans commentaires sur la m√©thode.\n</s><|assistant|>"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        840
      ],
      "id": "dc5cc588-9686-4388-be4e-19b7fb84b9db",
      "name": "proces verbale",
      "credentials": {
        "httpHeaderAuth": {
          "id": "JfCWC6zfw6MXnPz9",
          "name": "hugginFace4"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api-inference.huggingface.co/models/HuggingFaceH4/zephyr-7b-beta",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "inputs",
              "value": "=<|system|>\nTu es un assistant professionnel charg√© de r√©diger des **notes de r√©union claires, synth√©tiques et exploitables**.</s><|user|>\n### üß† Contexte\n- **Langue de r√©daction** : {{ $('Webhook Audio Upload1').item.json.body.language }}\n- **titre** :{{ $('Webhook Audio Upload1').item.json.body.meetingTitle }}\n- **ordre du jour** :{{ $('Webhook Audio Upload1').item.json.body.ordreJour }}\n- **Objectifs** :{{ $('Webhook Audio Upload1').item.json.body.mainObjective }}\n- **date**:{{ $('Webhook Audio Upload1').item.json.body.meetingDate }}\n- **participant** :{{ $('Webhook Audio Upload1').item.json.body.participants }}\n- **Transcription fournie** :{{ $('Extract from File').item.json.data }}\n  - Format: markdown\n  - Peut contenir des erreurs de ponctuation, formulations orales, impr√©cisions\n\n### üìö Objectif de la t√¢che\nProduis un **compte rendu structur√©** avec les sections suivantes, tout en reformulant et en am√©liorant le style si n√©cessaire :\n### üßæ Structure attendue du compte rendu\n1. ## R√©sum√© global (1 √† 3 paragraphes)\n   - Contexte de la r√©union\n   - Objectifs et points majeurs abord√©s\n   - D√©cisions importantes en r√©sum√©\n2. ## Participants\n   - Liste des intervenants (si connue)\n   - Fonctions ou r√¥les\n   - Pr√©sence active ou passive\n3. ## D√©cisions prises\n   - D√©cisions explicites ou implicites (validation tacite, consensus)\n   - D√©tail du contenu, contexte, impacts, √©ch√©ances si mentionn√©es\n   - Citer la source (intervenant + horodatage si possible)\n4. ## Actions √† mener (tableau recommand√©)\n| Action | Responsable | √âch√©ance | Priorit√© | Statut | Commentaire |\n|--------|-------------|----------|----------|--------|-------------|\n| [Action ici] | [Nom] | [JJ/MM/AAAA] | [Haute/Moyenne/Basse] | [√Ä d√©marrer/En cours/Termin√©] | [Bas√© sur d√©cision X] |\n   - Si l‚Äôaction est floue, indique-le clairement : `[Action floue √† confirmer]`\n5. ## Points soulev√©s ou probl√®mes √©voqu√©s\n   - Description du sujet\n   - Contexte ou origine\n   - Intervenants concern√©s\n   - Proposition de traitement (si discut√©)\n6. ## Questions ouvertes / points √† clarifier\n   - √âl√©ments rest√©s ambigus ou sans r√©ponse\n   - Propositions pour obtenir clarification (personne √† contacter, source √† revoir)\n7. ## Date et objectif de la prochaine r√©union\n   - Date mentionn√©e ou indiquer \"non pr√©cis√©e\"\n   - Ordre du jour ou th√®me annonc√©\n8. ## R√©f√©rences et documents associ√©s\n   - Slides, rapports, liens √©voqu√©s pendant la r√©union\n   - Si absence de d√©tails : indiquer ‚Äúnon pr√©cis√©‚Äù\n9. ## Citations cl√©s (facultatif)\n   - Quelques extraits textuels importants (avec orateur + horodatage si possible)\n10. ## Glossaire / acronymes (facultatif)\n   - Liste des termes techniques ou acronymes\n   - Explications ou signalement des termes non expliqu√©s dans la r√©union\n\n### ‚úçÔ∏è Consignes de style\n- Utilise un ton professionnel, neutre et pr√©cis\n- Reformule pour la clart√© et la grammaire sans d√©former le sens\n- Utilise des titres Markdown (`##`, `###`) pour structurer le document\n- Pr√©f√®re les listes √† puces ou les tableaux pour plus de lisibilit√©\n- Indique la source (horodatage + orateur) pour chaque d√©cision ou citation importante\n- Signale toute impr√©cision ou contenu flou de mani√®re neutre\n- Si des informations manquent (participants, objectif‚Ä¶), note-le en haut du document\n\n### ‚úÖ En conclusion, propose une check-list de validation :\n1. Responsables clairement identifi√©s ?\n2. √âch√©ances bien d√©finies ?\n3. Points flous signal√©s ?\n4. Prochaine r√©union planifi√©e ?\n5. Compte rendu pr√™t √† √™tre partag√© ou valid√© ?\n\n### üì• Mode d‚Äôemploi\n1. Fournir la transcription brute ou structur√©e\n2. L‚ÄôIA analyse et r√©dige selon le format ci-dessus\n3. La sortie est un document Markdown pr√™t √† copier, convertir en PDF ou envoyer par email\n### üìù Exemple de titre final :\n\\`\\`\\`markdown\n##  {{ $('Webhook Audio Upload1').item.json.body.meetingTitle }}‚Äì {{ $('Webhook Audio Upload1').item.json.body.meetingDate }}\n\\`\\`\\`\n### üìù Transcription:{{ $('Extract from File').item.json.data }}\n</s><|assistant|>"
            }
          ]
        },
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        1040
      ],
      "id": "c76e0c38-6282-4006-84da-46ea384a47d5",
      "name": "note de reunion",
      "credentials": {
        "httpHeaderAuth": {
          "id": "JfCWC6zfw6MXnPz9",
          "name": "hugginFace4"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"processing\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        396,
        640
      ],
      "id": "c653debd-fca0-48b5-b968-0f89e7943ee7",
      "name": "processing"
    },
    {
      "parameters": {
        "jsCode": "// √âtape 1 : r√©cup√©rer le texte g√©n√©r√© (ou une cha√Æne vide)\nconst output = $input.first().json.generated_text || '';\n\n// √âtape 2 : d√©finir la balise qui marque le d√©but de la vraie r√©ponse\nconst marker = '<|assistant|>';\n\n// √âtape 3 : extraire uniquement la r√©ponse utile\nlet response = output.includes(marker)\n  ? output.split(marker)[1]\n  : output;\n\n// √âtape 4 : nettoyer et structurer le contenu\n\n// Convertit les s√©quences \\n en vrais retours √† la ligne\nresponse = response.replace(/\\\\n/g, '\\n');\n// Supprime les espaces en d√©but/fin de chaque ligne\n// et conserve les sauts de ligne multiples (par exemple pour les paragraphes)\nresponse = response\n  .split('\\n')\n  .map(line => line.trim())\n  .join('\\n');\n\n// Remplace plusieurs espaces par un seul (dans les lignes)\nresponse = response\n  .split('\\n')\n  .map(line => line.replace(/ {2,}/g, ' '))\n  .join('\\n');\n\n// Ajoute un espace apr√®s chaque point s‚Äôil manque\nresponse = response.replace(/\\.([^\\s])/g, '. $1');\n\n// Facultatif : ajoute un saut de ligne apr√®s les titres Markdown si oubli√©s\nresponse = response.replace(/(#+ .+)/g, '\\n$1\\n');\n\n// Nettoie les lignes multiples excessives (plus de 3)\nresponse = response.replace(/\\n{3,}/g, '\\n\\n');\n\n// Supprime les √©ventuels caract√®res invisibles\nresponse = response.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n\nconst marker2 = \"2. Le contexte m√©tier\";\nconst index = response.indexOf(marker2);\n\nresponse = index !== -1\n  ? response.slice(index)  // Garde \"2. Le contexte m√©tier\" + tout apr√®s\n  : response;\n\n\n// Trim global (d√©but et fin de document)\n      response = response.trim()\n\n// Renvoi final format√©\nreturn [{\n  json: {\n    result: response\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        640
      ],
      "id": "2307fa9e-7854-4b15-bd9d-18644b1e85bc",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"generation\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        616,
        640
      ],
      "id": "89b40325-a15f-4d60-a25a-6c4c127d7d82",
      "name": "signal generation"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "result"
            },
            {
              "name": "data",
              "value": "={{ $('Code').item.json.result }}"
            },
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        836,
        640
      ],
      "id": "80c42320-3900-455f-bf8c-2daab9e7e725",
      "name": "signal send message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"processing\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        616,
        840
      ],
      "id": "8de68636-267b-4df5-9182-5b9e7de68c90",
      "name": "processing1"
    },
    {
      "parameters": {
        "jsCode": "// √âtape 1 : r√©cup√©rer le texte g√©n√©r√© (ou une cha√Æne vide)\nconst output = $input.first().json.generated_text || '';\n\n// √âtape 2 : d√©finir la balise qui marque le d√©but de la vraie r√©ponse\nconst marker = '<|assistant|>';\n\n// √âtape 3 : extraire uniquement la r√©ponse utile\nlet response = output.includes(marker)\n  ? output.split(marker)[1]\n  : output;\n\n// √âtape 4 : nettoyer et structurer le contenu\n\n// Convertit les s√©quences \\n en vrais retours √† la ligne\nresponse = response.replace(/\\\\n/g, '\\n');\n// Supprime les espaces en d√©but/fin de chaque ligne\n// et conserve les sauts de ligne multiples (par exemple pour les paragraphes)\nresponse = response\n  .split('\\n')\n  .map(line => line.trim())\n  .join('\\n');\n\n// Remplace plusieurs espaces par un seul (dans les lignes)\nresponse = response\n  .split('\\n')\n  .map(line => line.replace(/ {2,}/g, ' '))\n  .join('\\n');\n\n// Ajoute un espace apr√®s chaque point s‚Äôil manque\nresponse = response.replace(/\\.([^\\s])/g, '. $1');\n\n// Facultatif : ajoute un saut de ligne apr√®s les titres Markdown si oubli√©s\nresponse = response.replace(/(#+ .+)/g, '\\n$1\\n');\n\n// Nettoie les lignes multiples excessives (plus de 3)\nresponse = response.replace(/\\n{3,}/g, '\\n\\n');\n\n// Supprime les √©ventuels caract√®res invisibles\nresponse = response.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n\nconst marker2 = \"2. Le contexte m√©tier\";\nconst index = response.indexOf(marker2);\n\nresponse = index !== -1\n  ? response.slice(index)  // Garde \"2. Le contexte m√©tier\" + tout apr√®s\n  : response;\n\n\n// Trim global (d√©but et fin de document)\n      response = response.trim()\n\n// Renvoi final format√©\nreturn [{\n  json: {\n    result: response\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        396,
        840
      ],
      "id": "3d44c902-48b5-44ef-8655-09032c0808bb",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"generation\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        836,
        840
      ],
      "id": "5d9173af-5afd-4809-ba1c-f8e1002500f6",
      "name": "signal generation1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "result"
            },
            {
              "name": "data",
              "value": "={{ $('Code').item.json.result }}"
            },
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1056,
        840
      ],
      "id": "0addf2c7-3d9d-4f5e-9e18-901cf3f5ec43",
      "name": "signal send message1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"processing\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        616,
        1040
      ],
      "id": "c9173dc3-23bf-4b55-a744-f2aba82d6eed",
      "name": "processing2"
    },
    {
      "parameters": {
        "jsCode": "// √âtape 1 : r√©cup√©rer le texte g√©n√©r√© (ou une cha√Æne vide)\nconst output = $input.first().json.generated_text || '';\n\n// √âtape 2 : d√©finir la balise qui marque le d√©but de la vraie r√©ponse\nconst marker = '<|assistant|>';\n\n// √âtape 3 : extraire uniquement la r√©ponse utile\nlet response = output.includes(marker)\n  ? output.split(marker)[1]\n  : output;\n\n// √âtape 4 : nettoyer et structurer le contenu\n\n// Convertit les s√©quences \\n en vrais retours √† la ligne\nresponse = response.replace(/\\\\n/g, '\\n');\n// Supprime les espaces en d√©but/fin de chaque ligne\n// et conserve les sauts de ligne multiples (par exemple pour les paragraphes)\nresponse = response\n  .split('\\n')\n  .map(line => line.trim())\n  .join('\\n');\n\n// Remplace plusieurs espaces par un seul (dans les lignes)\nresponse = response\n  .split('\\n')\n  .map(line => line.replace(/ {2,}/g, ' '))\n  .join('\\n');\n\n// Ajoute un espace apr√®s chaque point s‚Äôil manque\nresponse = response.replace(/\\.([^\\s])/g, '. $1');\n\n// Facultatif : ajoute un saut de ligne apr√®s les titres Markdown si oubli√©s\nresponse = response.replace(/(#+ .+)/g, '\\n$1\\n');\n\n// Nettoie les lignes multiples excessives (plus de 3)\nresponse = response.replace(/\\n{3,}/g, '\\n\\n');\n\n// Supprime les √©ventuels caract√®res invisibles\nresponse = response.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n\nconst marker2 = \"2. Le contexte m√©tier\";\nconst index = response.indexOf(marker2);\n\nresponse = index !== -1\n  ? response.slice(index)  // Garde \"2. Le contexte m√©tier\" + tout apr√®s\n  : response;\n\n\n// Trim global (d√©but et fin de document)\n      response = response.trim()\n\n// Renvoi final format√©\nreturn [{\n  json: {\n    result: response\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        396,
        1040
      ],
      "id": "236c96b4-0d7d-4684-aec8-79402a3e857b",
      "name": "Code2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"result\",\n  \"data\": {\n    \"status\": \"completed\",\n    \"step\": \"generation\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        836,
        1040
      ],
      "id": "223a8ff7-1a94-4bc4-84ba-44ad0baa520c",
      "name": "signal generation2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rest.ably.io/channels/echo/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Basic Sm10QUNRLl9GNi0yUTo4S3RBcTFjU2lnUFlqUmtZRW5iN0VLdzlQY1JJNWZScTR6bkJxRFNJSm5n"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "result"
            },
            {
              "name": "data",
              "value": "={{ $('Code').item.json.result }}"
            },
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1056,
        1040
      ],
      "id": "5157b531-f913-42b3-bb2b-3974390b84f2",
      "name": "signal send message2"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "87lll",
              "inputDataFieldName": "audioFile"
            },
            {
              "name": "name",
              "value": "whisper-1"
            },
            {
              "name": "language",
              "value": "fr"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1100,
        840
      ],
      "id": "943ce670-b0bb-46f5-8b4c-81dbaa0a67b7",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "VQtiE4PnvYlywYQS",
          "name": "huggingFace"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Audio Upload1": {
      "main": [
        [
          {
            "node": "signal upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "signal upload": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "signal upload1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "compte rendu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "proces verbale",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "note de reunion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "compte rendu": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "proces verbale": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "note de reunion": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processing": {
      "main": [
        [
          {
            "node": "signal generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "signal generation": {
      "main": [
        [
          {
            "node": "signal send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processing1": {
      "main": [
        [
          {
            "node": "signal generation1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "signal generation1": {
      "main": [
        [
          {
            "node": "signal send message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processing2": {
      "main": [
        [
          {
            "node": "signal generation2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "processing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "signal generation2": {
      "main": [
        [
          {
            "node": "signal send message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "signal upload1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3adc0338-34e7-4c40-911d-a96b755647e1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e559e71e798f519f58c8dd99c967085c85cc3b15f3b1dbd92e89348b58d4b0e1"
  },
  "id": "gD0V5r3jS7qBA53V",
  "tags": []
}